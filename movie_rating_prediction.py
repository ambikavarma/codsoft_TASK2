# -*- coding: utf-8 -*-
"""MOVIE RATING PREDICTION

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EAyFhSwqZK-52FDco2yGrsgfRqTeR7AE
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
data = pd.read_csv("Movies.csv", encoding="latin-1")

data.head()

data.info()

data.isnull().sum()

"""# DATA PREPROCESSING"""

# Impute missing values for numerical and categorical features with mode
numerical_features = ['Year', 'Duration', 'Rating', 'Votes']
for feature in numerical_features:
    data[feature].fillna(data[feature].mode()[0], inplace=True)

categorical_features = ['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3']
for feature in categorical_features:
    data[feature].fillna(data[feature].mode()[0], inplace=True)


print(data.isnull().sum())

##One hot encoding
categorical_features = ['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3']
data = pd.get_dummies(data, columns=categorical_features)
print(data.head(10))

"""# FEATURE SCALING"""

from sklearn.preprocessing import StandardScaler
def preprocess_votes(votes):
    votes = votes.replace(',', '').replace('$', '')
    if 'M' in votes:
        votes = float(votes.replace('M', '')) * 1000000
    return float(votes)

data['Votes'] = data['Votes'].apply(preprocess_votes)

def preprocess_year(year):
    return int(year.strip('()'))

data['Year'] = data['Year'].apply(preprocess_year)

numerical_features = ['Year', 'Rating', 'Votes']
scaler = StandardScaler()
data_scaled = data.copy()
data_scaled[numerical_features] = scaler.fit_transform(data_scaled[numerical_features])

data_scaled

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

X = data_scaled[['Year', 'Rating', 'Votes']]
y = data_scaled['Rating']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)
r2 = r2_score(y_test, y_pred)
print("R square score:", r2)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

X = data_scaled[['Year', 'Rating', 'Votes']]
y = data_scaled['Rating']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)
r2 = r2_score(y_test, y_pred)
print("R square score:", r2)